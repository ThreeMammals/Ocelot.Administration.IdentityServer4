# Publishes beta-versions only
name: Publish Package
on:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Check .NET 8
      id: check-dotnet8
      run: |
        DOTNET8_VERSION=$(dotnet --version)
        if [[ "$DOTNET8_VERSION" =~ ^8\.0\.[0-9]+$ ]]; then
          echo "dotnet8_installed=true" >> $GITHUB_ENV
        else
          echo "dotnet8_installed=false" >> $GITHUB_ENV
        fi
    - name: Setup .NET 8
      if: env.dotnet8_installed == 'false'
      uses: actions/setup-dotnet@v4 # https://github.com/actions/setup-dotnet
      with:
        dotnet-version: 8.0.x
        dotnet-quality: 'ga'
    - name: Checkout
      uses: actions/checkout@v4
    - name: Restore
      run: dotnet restore ./Ocelot.Administration.IdentityServer4.sln -p:TargetFramework=net8.0
    - name: Build
      run: dotnet build --no-restore ./Ocelot.Administration.IdentityServer4.sln --framework net8.0
    - name: Unit tests
      run: dotnet test --no-restore --no-build ./unit/Ocelot.Administration.IdentityServer4.UnitTests.csproj --collect:"XPlat Code Coverage" --framework net8.0
    - name: Acceptance tests
      run: dotnet test --no-restore --no-build ./acceptance/Ocelot.Administration.IdentityServer4.AcceptanceTests.csproj --framework net8.0
    - name: Find files
      id: files
      run: |
        echo "GITHUB REF is ${{ github.ref }}"
        echo "GITHUB REF NAME is ${{ github.ref_name }}"
        echo "GITHUB SHA is ${{ github.sha }}"
        # https://reportgenerator.io/
        coverage_1st_folder=$(ls -d ./unit/TestResults/*/ | head -1)
        echo "Detected first folder : $coverage_1st_folder"
        coverage_file="${coverage_1st_folder%/}/coverage.cobertura.xml"
        echo "Detecting coverage file... -> $coverage_file"
        if [ -f "$coverage_file" ]; then
          echo Coverage file exists.
          echo "COVERAGE_FILE_EXISTS=true" >> $GITHUB_OUTPUT
          echo "COVERAGE_FILE=$coverage_file" >> $GITHUB_OUTPUT
        else
          echo Coverage file DOES NOT exist!
          echo "COVERAGE_FILE_EXISTS=false" >> $GITHUB_OUTPUT
          exit 1
        fi
    - name: Install tools
      run: |
        # .NET tools aka .config/dotnet-tools.json
        echo Installing .NET tools aka dotnet-tools.json ...
        dotnet tool restore
        # Install XML tools
        echo Installing XML tools ...
        sudo apt update
        sudo apt install libxml2-utils # aka xmllint read-command. xmlstarlet is not required

    # Extract actual coverage % from the Coverlet XML-file
    - name: Coverage by unit tests
      id: coverage
      run: |
        line_coverage=$(xmllint --xpath "string(//coverage/@line-rate)" ${{ steps.files.outputs.COVERAGE_FILE }})
        echo Line coverage: $line_coverage
        echo "LineCoverage=$line_coverage" >> $GITHUB_OUTPUT
        echo "LINE_COVERAGE=$line_coverage" >> $GITHUB_ENV
        branch_coverage=$(xmllint --xpath "string(//coverage/@branch-rate)" ${{ steps.files.outputs.COVERAGE_FILE }})
        echo Branch coverage: $branch_coverage
        echo "BranchCoverage=$branch_coverage" >> $GITHUB_OUTPUT
        echo "BRANCH_COVERAGE=$branch_coverage" >> $GITHUB_ENV

    # The action below replaces the following command: dotnet tool run reportgenerator -reports:$coverage_file -targetdir:coveragereport-md -reporttypes:MarkdownSummaryGithub
    # Docs: https://reportgenerator.io/
    - name: Generate coverage report (Markdown)
      if: steps.files.outputs.COVERAGE_FILE_EXISTS == 'true'
      uses: danielpalme/ReportGenerator-GitHub-Action@5.4.7 # Docs: https://github.com/marketplace/actions/reportgenerator
      with:
        reports: ${{ steps.files.outputs.COVERAGE_FILE }}
        targetdir: coveragereport-md
        reporttypes: MarkdownSummaryGithub

    # DOCS Storing and sharing data from a workflow -> https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/storing-and-sharing-data-from-a-workflow
    - name: Upload coverage MD-report artifact
      uses: actions/upload-artifact@v4 # https://github.com/actions/upload-artifact
      with:
        name: CoverageReport-markdown # Artifact name        
        path: coveragereport-md # Directory containing files to upload
    - name: Publish coverage in build summary # Only applicable if 'MarkdownSummaryGithub' or one of the other Markdown report types is generated
      run: |
        echo Listing files of MD report...
        find coveragereport-md -type f -print | sort
        echo Publishing coverage in build summary...
        cat coveragereport-md/SummaryGithub.md >> $GITHUB_STEP_SUMMARY # Adjust path and filename if necessary
      shell: bash

    # The action below replaces the following command: dotnet tool run reportgenerator -reports:$coverage_file -targetdir:coveragereport -reporttypes:HtmlInline
    # Docs: https://reportgenerator.io/
    - name: Generate coverage report (HTML)
      if: steps.files.outputs.COVERAGE_FILE_EXISTS == 'true'
      uses: danielpalme/ReportGenerator-GitHub-Action@5.4.7 # Docs: https://github.com/marketplace/actions/reportgenerator
      with:
        reports: ${{ steps.files.outputs.COVERAGE_FILE }}
        targetdir: coveragereport
        reporttypes: HtmlInline # Html is applicable for websites only
    - name: List HTML report files
      run: |
        echo Listing files of HTML report...
        find coveragereport -type f -print | sort
    - name: Upload coverage HTML-report artifact
      uses: actions/upload-artifact@v4 # https://github.com/actions/upload-artifact
      with:
        name: CoverageReport-html
        path: coveragereport/*.html

  publish:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: .NET Version
        run: dotnet --version
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            9.0.x
      - name: .NET Info
        run: dotnet --info

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: README.md
        run: |
          echo Original README.md
          echo ------------------------
          cat README.md
          echo ------------------------
          # Replace "AAA" with "BBB" and "CCC" with "DDD" in a UTF-8 encoded file
          sed -i 's|/ocelot_icon.png|https://raw.githubusercontent.com/ThreeMammals/Ocelot.Administration.IdentityServer4/refs/heads/main/ocelot_icon.png|g; s|/idser4_logo.png|https://raw.githubusercontent.com/ThreeMammals/Ocelot.Administration.IdentityServer4/refs/heads/main/identity-server-4_logo.png|g' README.md
          echo New content of README.md
          echo ------------------------
          cat README.md

      - name: Restore dependencies
        run: dotnet restore ./Ocelot.Administration.IdentityServer4.sln

      - name: Build project
        run: dotnet build ./src/Ocelot.Administration.IdentityServer4.csproj --configuration Release --no-restore

      - name: Pack project
        run: dotnet pack ./src/Ocelot.Administration.IdentityServer4.csproj --configuration Release --output ./packages

      - name: Publish to GitHub Packages
        run: dotnet nuget push ./packages/*.nupkg --source "https://nuget.pkg.github.com/ThreeMammals/index.json" --api-key ${{ secrets.GITHUB_TOKEN }} --skip-duplicate

      - name: Publish to NuGet
        run: dotnet nuget push ./packages/*.nupkg --source "https://api.nuget.org/v3/index.json" --api-key ${{ secrets.NUGET_API_KEY_2025 }} --skip-duplicate
